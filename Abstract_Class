using System;

namespace AbstractClassExample
{
    // Abstract base class
    abstract class Shape
    {
        // Abstract method (must be implemented by derived classes)
        public abstract void Draw();

        // Non-abstract method (optional to override)
        public void Display()
        {
            Console.WriteLine("This is a shape.");
        }
    }

    // Derived class 1
    class Circle : Shape
    {
        public override void Draw()
        {
            Console.WriteLine("Drawing a Circle.");
        }
    }

    // Derived class 2
    class Rectangle : Shape
    {
        public override void Draw()
        {
            Console.WriteLine("Drawing a Rectangle.");
        }
    }

    // Derived class 3
    class Triangle : Shape
    {
        public override void Draw()
        {
            Console.WriteLine("Drawing a Triangle.");
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            // Shape cannot be instantiated directly
            // Shape shape = new Shape(); // Error

            // Using polymorphism
            Shape shape1 = new Circle();
            Shape shape2 = new Rectangle();
            Shape shape3 = new Triangle();

            // Call the Draw method
            shape1.Draw();
            shape2.Draw();
            shape3.Draw();

            // Call the non-abstract method
            shape1.Display();
        }
    }
}
